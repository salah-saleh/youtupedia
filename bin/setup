#!/usr/bin/env ruby
require "fileutils"

APP_ROOT = File.expand_path("..", __dir__)

def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

def setup_python_environment
  puts "\n== Setting up Python environment =="
  
  # Check if Python 3 is installed
  unless system("which python3 > /dev/null")
    abort "\nError: Python 3 is not installed. Please install it first:"
    abort "  brew install python3"
  end

  # Get Python version
  python_version = `python3 --version`.strip
  puts "Using #{python_version}"

  # Remove existing venv if it exists
  FileUtils.rm_rf "venv"

  # Create new virtual environment
  system! "python3 -m venv venv"

  # Install dependencies using the venv pip
  if RbConfig::CONFIG['host_os'] =~ /darwin|mac os/
    system! "venv/bin/pip install --upgrade pip"
    system! "venv/bin/pip install -r requirements.txt"
  else
    system! "source venv/bin/activate && pip install --upgrade pip"
    system! "source venv/bin/activate && pip install -r requirements.txt"
  end
end

FileUtils.chdir APP_ROOT do
  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system("bundle check") || system!("bundle install")

  setup_python_environment

  puts "\n== Preparing database =="
  system! "bin/rails db:prepare"

  puts "\n== Removing old logs and tempfiles =="
  system! "bin/rails log:clear tmp:clear"

  unless ARGV.include?("--skip-server")
    puts "\n== Starting development server =="
    STDOUT.flush # flush the output before exec(2) so that it displays
    exec "bin/dev"
  end
end
