require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  # config.cache_store = :memory_store
  config.cache_store = :mem_cache_store,
    ENV["MEMCACHED_URL"],
    {
      namespace: "youtupedia_dev",    # Prefix to avoid key collisions
      compress: true,           # Compress data to save memory
      failover: true,          # Try other servers if one fails
      socket_timeout: 3.0,     # Time to wait for response
      pool_size: 5,            # Number of connections to keep
      expires_in: 1.day        # Default TTL for all keys
    }

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :local

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  # Make template changes take effect immediately.
  config.action_mailer.perform_caching = false

  # Set localhost to be used by links generated in mailer templates.
  config.action_mailer.default_url_options = { host: "localhost", port: 3000 }

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  # config.generators.apply_rubocop_autocorrect_after_generate!

  # Configure logging for development
  config.log_level = :info

  # Only reduce MongoDB noise in development
  Mongoid.logger.level = Logger::INFO
  Mongo::Logger.logger.level = Logger::WARN

  # Disable Google API client logging completely
  Google::Apis.logger.level = Logger::Severity::WARN

  # Configure ActiveJob logging to be less verbose
  ActiveJob::Base.logger = Logger.new(STDOUT)
  ActiveJob::Base.logger.level = Logger::INFO

  # Set up console logger with custom formatter
  console_logger = ActiveSupport::Logger.new(STDOUT)
  console_logger.formatter = Logging::Formatter.new(
    colorize: true,   # Colors in console
  )
  # console_logger = ActiveSupport::TaggedLogging.new(console_logger)
  console_logger.level = config.log_level

  # # Set up file logger with custom formatter
  # file_logger = ActiveSupport::Logger.new(Rails.root.join("log/#{Rails.env}.log"))
  # file_logger.formatter = Logging::Formatter.new(
  #   colorize: false,  # No colors in file
  # )
  # file_logger = ActiveSupport::TaggedLogging.new(file_logger)

  # # Combine loggers and add tagging support
  # combined_logger = ActiveSupport::BroadcastLogger.new(file_logger, console_logger)
  # combined_logger.level = config.log_level

  # Use the combined logger
  Rails.logger = console_logger
  config.logger = console_logger

  # Email delivery configuration
  config.action_mailer.perform_deliveries = true
  config.action_mailer.raise_delivery_errors = true
  config.action_mailer.default_url_options = { host: "localhost", port: 3000 }
  config.action_mailer.delivery_method = :letter_opener
  # config.action_mailer.delivery_method = :postmark
  # config.action_mailer.postmark_settings = { api_token: ENV["POSTMARK_API_KEY"] }
  config.action_mailer.perform_caching = false

  # Allow test domains for Rack::Attack testing
  config.hosts << "y2si.com"
  config.hosts << "test.com"

  # Allow our main domain and development hosts
  config.hosts = [
    "youtupedia.ai",
    "www.youtupedia.ai",
    "localhost",
    "127.0.0.1",
    "::1",
    "0.0.0.0",
    IPAddr.new("0.0.0.0/0"),        # Allow all IPv4 
    IPAddr.new("::/0"),             # Allow all IPv6
  ]
end
